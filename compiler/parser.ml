type token =
  | LPAREN
  | RPAREN
  | LCAR
  | RCAR
  | LBRACE
  | RBRACE
  | COMMA
  | VBAR
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | POWER
  | EQ
  | NEQ
  | LEQ
  | GEQ
  | AND
  | OR
  | NOT
  | ASN
  | IF
  | THEN
  | ELSE
  | DO
  | FDELIM
  | RETURN
  | CAKE
  | EOF
  | ID of (string)
  | NUM_LITERAL of (Ast.num)
  | STRING_LITERAL of (string)
  | BOOL_LITERAL of (bool)
  | VOID_LITERAL

open Parsing;;
let _ = parse_error;;
# 11 "parser.mly"
 open Ast 
# 43 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LCAR *);
  260 (* RCAR *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* COMMA *);
  264 (* VBAR *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* MOD *);
  270 (* POWER *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LEQ *);
  274 (* GEQ *);
  275 (* AND *);
  276 (* OR *);
  277 (* NOT *);
  278 (* ASN *);
  279 (* IF *);
  280 (* THEN *);
  281 (* ELSE *);
  282 (* DO *);
  283 (* FDELIM *);
  284 (* RETURN *);
  285 (* CAKE *);
    0 (* EOF *);
  290 (* VOID_LITERAL *);
    0|]

let yytransl_block = [|
  286 (* ID *);
  287 (* NUM_LITERAL *);
  288 (* STRING_LITERAL *);
  289 (* BOOL_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\009\000\
\010\000\010\000\011\000\011\000\008\000\008\000\012\000\012\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\005\000\005\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\001\000\001\000\001\000\001\000\
\003\000\004\000\003\000\003\000\001\000\005\000\006\000\006\000\
\000\000\001\000\001\000\003\000\000\000\001\000\001\000\003\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\045\000\000\000\000\000\001\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\042\000\043\000\
\044\000\000\000\005\000\006\000\007\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\002\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\000\000\000\000\010\000\014\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\007\000\028\000\019\000\020\000\021\000\029\000\
\022\000\026\000\027\000\030\000"

let yysindex = "\016\000\
\000\000\000\000\000\000\008\000\048\255\000\000\000\000\063\255\
\048\255\048\255\048\255\048\255\001\255\000\000\000\000\000\000\
\000\000\173\001\000\000\000\000\000\000\000\000\001\255\189\255\
\252\254\018\255\021\255\173\001\040\255\047\255\049\255\000\000\
\161\255\048\255\048\255\048\255\048\255\048\255\048\255\048\255\
\048\255\048\255\048\255\048\255\048\255\048\255\048\255\048\255\
\048\255\000\000\048\255\000\000\017\255\000\000\048\255\048\255\
\053\255\173\001\000\255\000\255\049\255\049\255\042\255\042\255\
\042\255\000\000\237\255\237\255\000\255\000\255\208\001\191\001\
\057\255\246\254\000\000\173\001\133\255\000\000\000\000\048\255\
\048\255\173\001\173\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\255\
\060\255\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\105\255\000\000\
\217\255\000\000\043\255\013\255\000\000\046\255\113\000\000\000\
\000\000\065\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\255\000\000\000\000\000\000\000\000\000\000\
\000\000\134\001\197\000\225\000\141\000\169\000\029\000\057\000\
\085\000\000\000\056\001\071\001\253\000\028\001\099\001\106\001\
\000\000\000\000\000\000\020\255\000\000\000\000\000\000\000\000\
\000\000\140\001\146\001"

let yygindex = "\000\000\
\000\000\020\000\000\000\251\255\000\000\000\000\000\000\226\255\
\066\000\000\000\000\000\000\000"

let yytablesize = 738
let yytable = "\018\000\
\008\000\034\000\024\000\057\000\031\000\032\000\033\000\006\000\
\038\000\039\000\040\000\041\000\042\000\043\000\023\000\005\000\
\001\000\080\000\023\000\023\000\073\000\024\000\035\000\004\000\
\051\000\024\000\024\000\053\000\028\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\052\000\054\000\075\000\022\000\
\008\000\076\000\077\000\022\000\009\000\055\000\078\000\043\000\
\029\000\010\000\079\000\040\000\041\000\042\000\043\000\008\000\
\017\000\021\000\021\000\009\000\011\000\018\000\012\000\074\000\
\010\000\025\000\082\000\083\000\000\000\013\000\014\000\015\000\
\016\000\017\000\000\000\011\000\030\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\014\000\015\000\016\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\008\000\008\000\000\000\000\000\019\000\
\025\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\036\000\
\037\000\000\000\000\000\000\000\026\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\000\000\000\000\000\000\000\000\081\000\000\000\000\000\
\000\000\000\000\000\000\036\000\037\000\000\000\000\000\000\000\
\027\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\000\000\000\000\000\000\
\056\000\000\000\000\000\000\000\000\000\000\000\050\000\036\000\
\037\000\000\000\000\000\000\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\013\000\013\000\000\000\000\000\000\000\
\039\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\000\000\000\000\036\000\
\037\000\000\000\000\000\000\000\000\000\038\000\039\000\040\000\
\041\000\042\000\043\000\000\000\038\000\046\000\047\000\000\000\
\000\000\000\000\008\000\008\000\008\000\000\000\008\000\008\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\000\000\000\000\
\008\000\008\000\008\000\040\000\008\000\008\000\028\000\028\000\
\028\000\005\000\028\000\028\000\000\000\028\000\028\000\028\000\
\028\000\028\000\000\000\028\000\028\000\028\000\028\000\028\000\
\028\000\004\000\000\000\004\000\028\000\028\000\028\000\035\000\
\028\000\028\000\029\000\029\000\029\000\000\000\029\000\029\000\
\000\000\029\000\029\000\029\000\029\000\029\000\036\000\029\000\
\029\000\029\000\029\000\029\000\029\000\000\000\000\000\000\000\
\029\000\029\000\029\000\000\000\029\000\029\000\030\000\030\000\
\030\000\000\000\030\000\030\000\000\000\030\000\030\000\030\000\
\030\000\030\000\034\000\030\000\030\000\030\000\030\000\030\000\
\030\000\033\000\000\000\000\000\030\000\030\000\030\000\000\000\
\030\000\030\000\025\000\025\000\025\000\000\000\025\000\025\000\
\000\000\025\000\025\000\000\000\000\000\000\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\009\000\000\000\000\000\
\025\000\025\000\025\000\016\000\025\000\025\000\026\000\026\000\
\026\000\015\000\026\000\026\000\000\000\026\000\026\000\000\000\
\000\000\000\000\000\000\026\000\026\000\026\000\026\000\026\000\
\026\000\000\000\000\000\000\000\026\000\026\000\026\000\000\000\
\026\000\026\000\027\000\027\000\027\000\000\000\027\000\027\000\
\000\000\027\000\027\000\000\000\000\000\000\000\000\000\027\000\
\027\000\027\000\027\000\027\000\027\000\000\000\000\000\000\000\
\027\000\027\000\027\000\000\000\027\000\027\000\037\000\037\000\
\037\000\000\000\037\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\000\000\000\000\000\000\037\000\037\000\037\000\000\000\
\037\000\037\000\039\000\039\000\039\000\000\000\039\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\000\000\000\000\000\000\
\039\000\039\000\039\000\000\000\039\000\039\000\038\000\038\000\
\038\000\000\000\038\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\000\000\038\000\038\000\038\000\000\000\
\038\000\038\000\000\000\000\000\000\000\040\000\040\000\040\000\
\000\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\000\000\000\000\000\000\040\000\040\000\040\000\000\000\040\000\
\040\000\035\000\000\000\000\000\000\000\035\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\035\000\
\036\000\000\000\035\000\035\000\036\000\036\000\000\000\035\000\
\035\000\035\000\000\000\035\000\035\000\036\000\036\000\000\000\
\000\000\036\000\036\000\000\000\000\000\000\000\036\000\036\000\
\036\000\000\000\036\000\036\000\034\000\000\000\000\000\000\000\
\034\000\034\000\000\000\033\000\000\000\000\000\000\000\033\000\
\033\000\000\000\000\000\000\000\000\000\034\000\034\000\000\000\
\000\000\000\000\034\000\034\000\034\000\033\000\034\000\034\000\
\000\000\033\000\033\000\033\000\000\000\033\000\033\000\009\000\
\000\000\000\000\000\000\009\000\009\000\016\000\000\000\000\000\
\000\000\016\000\016\000\015\000\000\000\000\000\000\000\015\000\
\015\000\000\000\000\000\000\000\000\000\009\000\009\000\009\000\
\000\000\009\000\009\000\016\000\016\000\016\000\000\000\016\000\
\016\000\015\000\015\000\015\000\000\000\015\000\015\000\036\000\
\037\000\000\000\000\000\000\000\000\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\036\000\037\000\000\000\000\000\000\000\000\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\036\000\037\000\000\000\000\000\000\000\000\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000"

let yycheck = "\005\000\
\000\000\001\001\008\000\034\000\010\000\011\000\012\000\000\000\
\009\001\010\001\011\001\012\001\013\001\014\001\002\001\026\001\
\001\000\028\001\006\001\007\001\051\000\002\001\022\001\000\000\
\029\001\006\001\007\001\007\001\000\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\027\001\006\001\030\001\002\001\
\001\001\055\000\056\000\006\001\005\001\007\001\002\001\014\001\
\000\000\010\001\002\001\011\001\012\001\013\001\014\001\001\001\
\027\001\006\001\002\001\005\001\021\001\027\001\023\001\052\000\
\010\001\008\000\080\000\081\000\255\255\030\001\031\001\032\001\
\033\001\034\001\255\255\021\001\000\000\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\255\255\255\255\007\001\
\000\000\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\003\001\
\004\001\255\255\255\255\255\255\000\000\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\255\255\255\255\025\001\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\255\255\255\255\
\000\000\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\002\001\003\001\
\004\001\255\255\255\255\255\255\000\000\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\255\255\255\255\255\255\
\000\000\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\003\001\
\004\001\255\255\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\000\000\017\001\018\001\255\255\
\255\255\255\255\002\001\003\001\004\001\255\255\006\001\007\001\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\024\001\025\001\026\001\000\000\028\001\029\001\002\001\003\001\
\004\001\026\001\006\001\007\001\255\255\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\026\001\255\255\028\001\024\001\025\001\026\001\000\000\
\028\001\029\001\002\001\003\001\004\001\255\255\006\001\007\001\
\255\255\009\001\010\001\011\001\012\001\013\001\000\000\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\024\001\025\001\026\001\255\255\028\001\029\001\002\001\003\001\
\004\001\255\255\006\001\007\001\255\255\009\001\010\001\011\001\
\012\001\013\001\000\000\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\255\255\255\255\024\001\025\001\026\001\255\255\
\028\001\029\001\002\001\003\001\004\001\255\255\006\001\007\001\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\255\255\255\255\
\024\001\025\001\026\001\000\000\028\001\029\001\002\001\003\001\
\004\001\000\000\006\001\007\001\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\255\255\024\001\025\001\026\001\255\255\
\028\001\029\001\002\001\003\001\004\001\255\255\006\001\007\001\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\024\001\025\001\026\001\255\255\028\001\029\001\002\001\003\001\
\004\001\255\255\006\001\007\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\255\255\024\001\025\001\026\001\255\255\
\028\001\029\001\002\001\003\001\004\001\255\255\006\001\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\024\001\025\001\026\001\255\255\028\001\029\001\002\001\003\001\
\004\001\255\255\006\001\007\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\255\255\024\001\025\001\026\001\255\255\
\028\001\029\001\255\255\255\255\255\255\002\001\003\001\004\001\
\255\255\006\001\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\024\001\025\001\026\001\255\255\028\001\
\029\001\002\001\255\255\255\255\255\255\006\001\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\002\001\255\255\019\001\020\001\006\001\007\001\255\255\024\001\
\025\001\026\001\255\255\028\001\029\001\015\001\016\001\255\255\
\255\255\019\001\020\001\255\255\255\255\255\255\024\001\025\001\
\026\001\255\255\028\001\029\001\002\001\255\255\255\255\255\255\
\006\001\007\001\255\255\002\001\255\255\255\255\255\255\006\001\
\007\001\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\255\255\255\255\024\001\025\001\026\001\020\001\028\001\029\001\
\255\255\024\001\025\001\026\001\255\255\028\001\029\001\002\001\
\255\255\255\255\255\255\006\001\007\001\002\001\255\255\255\255\
\255\255\006\001\007\001\002\001\255\255\255\255\255\255\006\001\
\007\001\255\255\255\255\255\255\255\255\024\001\025\001\026\001\
\255\255\028\001\029\001\024\001\025\001\026\001\255\255\028\001\
\029\001\024\001\025\001\026\001\255\255\028\001\029\001\003\001\
\004\001\255\255\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\003\001\004\001\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LCAR\000\
  RCAR\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  VBAR\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  POWER\000\
  EQ\000\
  NEQ\000\
  LEQ\000\
  GEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  ASN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  DO\000\
  FDELIM\000\
  RETURN\000\
  CAKE\000\
  EOF\000\
  VOID_LITERAL\000\
  "

let yynames_block = "\
  ID\000\
  NUM_LITERAL\000\
  STRING_LITERAL\000\
  BOOL_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 70 "parser.mly"
                                          ( List.rev _1 )
# 387 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                                          ( [] )
# 393 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 74 "parser.mly"
                                          ( _2 :: _1 )
# 401 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                                          ( Do(_2) )
# 408 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 81 "parser.mly"
                                          ( _1 )
# 415 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 82 "parser.mly"
                                          ( _1 )
# 422 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'boolean) in
    Obj.repr(
# 83 "parser.mly"
                                          ( _1 )
# 429 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parser.mly"
                                          ( Id(_1) )
# 436 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                          ( Assign(_1, _3) )
# 444 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list_opt) in
    Obj.repr(
# 86 "parser.mly"
                                          ( Call(Id(_1), _3) )
# 452 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_opt) in
    Obj.repr(
# 87 "parser.mly"
                                          ( List(_2) )
# 459 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                                          ( _2 )
# 466 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 89 "parser.mly"
                                          ( Fdecl(_1) )
# 473 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'fdecl) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'list_opt) in
    Obj.repr(
# 90 "parser.mly"
                                          ( Cake(Fdecl(_2), _4) )
# 481 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                                          ( If(_2, _4, _6) )
# 490 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'fparam_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
    ( {
      params = _2;
      body = List.rev _4;
      return = _6;
    } )
# 503 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                                          ( [] )
# 509 "parser.ml"
               : 'fparam_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fparam_list) in
    Obj.repr(
# 104 "parser.mly"
                                          ( List.rev _1 )
# 516 "parser.ml"
               : 'fparam_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                                          ( [_1] )
# 523 "parser.ml"
               : 'fparam_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fparam_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
                                          ( _3 :: _1 )
# 531 "parser.ml"
               : 'fparam_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                                          ( [] )
# 537 "parser.ml"
               : 'list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 113 "parser.mly"
                                          ( List.rev _1 )
# 544 "parser.ml"
               : 'list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                                          ( [_1] )
# 551 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                                          ( _3 :: _1 )
# 559 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                                          ( Unop(Sub, _2) )
# 566 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                                          ( Binop(_1, Add, _3) )
# 574 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                                          ( Binop(_1, Sub, _3) )
# 582 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                                          ( Binop(_1, Mult, _3) )
# 590 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                                          ( Binop(_1, Div, _3) )
# 598 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                                          ( Binop(_1, Mod, _3) )
# 606 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                                          ( Binop(_1, Pow, _3) )
# 614 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                                          ( Unop(Not, _2) )
# 621 "parser.ml"
               : 'boolean))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                          ( Binop(_1, Or, _3) )
# 629 "parser.ml"
               : 'boolean))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                                          ( Binop(_1, And, _3) )
# 637 "parser.ml"
               : 'boolean))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                          ( Binop(_1, Eq, _3) )
# 645 "parser.ml"
               : 'boolean))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                          ( Binop(_1, Neq, _3) )
# 653 "parser.ml"
               : 'boolean))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                                          ( Binop(_1, Less, _3) )
# 661 "parser.ml"
               : 'boolean))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                                          ( Binop(_1, Leq, _3) )
# 669 "parser.ml"
               : 'boolean))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                                          ( Binop(_1, Greater, _3) )
# 677 "parser.ml"
               : 'boolean))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                                          ( Binop(_1, Geq, _3) )
# 685 "parser.ml"
               : 'boolean))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.num) in
    Obj.repr(
# 142 "parser.mly"
                                          ( Num_lit(_1) )
# 692 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 143 "parser.mly"
                                          ( String_lit(_1) )
# 699 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 144 "parser.mly"
                                          ( Bool_lit(_1) )
# 706 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                                          ( Void_lit )
# 712 "parser.ml"
               : 'literal))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
